use crate::{IntoSql, TokenRow};

/// create a TokenRow from list of values
pub trait IntoRow<'a> {
    /// create a TokenRow from list of values which implements IntoSQL
    fn into_row(self) -> TokenRow<'a>;
}

// This file is automatically generated by build.rs
// Do not edit manually

impl<'a, A> IntoRow<'a> for (A,)
where
    A: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(1);
        row.push(self.0.into_sql());
        row
    }
}

impl<'a, A, B> IntoRow<'a> for (A, B)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(2);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row
    }
}

impl<'a, A, B, C> IntoRow<'a> for (A, B, C)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(3);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row
    }
}

impl<'a, A, B, C, D> IntoRow<'a> for (A, B, C, D)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(4);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E> IntoRow<'a> for (A, B, C, D, E)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(5);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F> IntoRow<'a> for (A, B, C, D, E, F)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(6);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G> IntoRow<'a> for (A, B, C, D, E, F, G)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(7);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H> IntoRow<'a> for (A, B, C, D, E, F, G, H)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(8);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I> IntoRow<'a> for (A, B, C, D, E, F, G, H, I)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(9);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(10);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(11);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(12);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(13);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(14);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(15);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(16);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(17);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(18);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(19);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(20);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(21);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(22);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(23);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(24);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(25);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(26);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(27);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(28);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(29);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(30);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(31);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(32);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(33);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(34);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(35);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(36);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(37);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(38);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(39);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(40);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(41);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(42);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(43);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(44);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(45);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(46);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(47);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(48);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(49);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(50);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(51);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(52);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(53);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(54);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(55);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(56);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(57);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(58);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(59);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(60);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(61);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(62);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(63);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(64);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(65);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(66);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(67);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(68);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(69);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(70);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(71);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(72);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(73);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(74);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(75);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(76);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(77);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(78);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(79);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(80);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(81);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(82);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(83);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(84);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(85);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(86);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(87);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(88);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(89);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(90);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(91);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(92);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(93);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(94);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(95);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>,
    CR: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(96);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row.push(self.95.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>,
    CR: IntoSql<'a>,
    CS: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(97);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row.push(self.95.into_sql());
        row.push(self.96.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>,
    CR: IntoSql<'a>,
    CS: IntoSql<'a>,
    CT: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(98);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row.push(self.95.into_sql());
        row.push(self.96.into_sql());
        row.push(self.97.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>,
    CR: IntoSql<'a>,
    CS: IntoSql<'a>,
    CT: IntoSql<'a>,
    CU: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(99);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row.push(self.95.into_sql());
        row.push(self.96.into_sql());
        row.push(self.97.into_sql());
        row.push(self.98.into_sql());
        row
    }
}

impl<'a, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU, CV> IntoRow<'a> for (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA, AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW, AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL, BM, BN, BO, BP, BQ, BR, BS, BT, BU, BV, BW, BX, BY, BZ, CA, CB, CC, CD, CE, CF, CG, CH, CI, CJ, CK, CL, CM, CN, CO, CP, CQ, CR, CS, CT, CU, CV)
where
    A: IntoSql<'a>,
    B: IntoSql<'a>,
    C: IntoSql<'a>,
    D: IntoSql<'a>,
    E: IntoSql<'a>,
    F: IntoSql<'a>,
    G: IntoSql<'a>,
    H: IntoSql<'a>,
    I: IntoSql<'a>,
    J: IntoSql<'a>,
    K: IntoSql<'a>,
    L: IntoSql<'a>,
    M: IntoSql<'a>,
    N: IntoSql<'a>,
    O: IntoSql<'a>,
    P: IntoSql<'a>,
    Q: IntoSql<'a>,
    R: IntoSql<'a>,
    S: IntoSql<'a>,
    T: IntoSql<'a>,
    U: IntoSql<'a>,
    V: IntoSql<'a>,
    W: IntoSql<'a>,
    X: IntoSql<'a>,
    Y: IntoSql<'a>,
    Z: IntoSql<'a>,
    AA: IntoSql<'a>,
    AB: IntoSql<'a>,
    AC: IntoSql<'a>,
    AD: IntoSql<'a>,
    AE: IntoSql<'a>,
    AF: IntoSql<'a>,
    AG: IntoSql<'a>,
    AH: IntoSql<'a>,
    AI: IntoSql<'a>,
    AJ: IntoSql<'a>,
    AK: IntoSql<'a>,
    AL: IntoSql<'a>,
    AM: IntoSql<'a>,
    AN: IntoSql<'a>,
    AO: IntoSql<'a>,
    AP: IntoSql<'a>,
    AQ: IntoSql<'a>,
    AR: IntoSql<'a>,
    AS: IntoSql<'a>,
    AT: IntoSql<'a>,
    AU: IntoSql<'a>,
    AV: IntoSql<'a>,
    AW: IntoSql<'a>,
    AX: IntoSql<'a>,
    AY: IntoSql<'a>,
    AZ: IntoSql<'a>,
    BA: IntoSql<'a>,
    BB: IntoSql<'a>,
    BC: IntoSql<'a>,
    BD: IntoSql<'a>,
    BE: IntoSql<'a>,
    BF: IntoSql<'a>,
    BG: IntoSql<'a>,
    BH: IntoSql<'a>,
    BI: IntoSql<'a>,
    BJ: IntoSql<'a>,
    BK: IntoSql<'a>,
    BL: IntoSql<'a>,
    BM: IntoSql<'a>,
    BN: IntoSql<'a>,
    BO: IntoSql<'a>,
    BP: IntoSql<'a>,
    BQ: IntoSql<'a>,
    BR: IntoSql<'a>,
    BS: IntoSql<'a>,
    BT: IntoSql<'a>,
    BU: IntoSql<'a>,
    BV: IntoSql<'a>,
    BW: IntoSql<'a>,
    BX: IntoSql<'a>,
    BY: IntoSql<'a>,
    BZ: IntoSql<'a>,
    CA: IntoSql<'a>,
    CB: IntoSql<'a>,
    CC: IntoSql<'a>,
    CD: IntoSql<'a>,
    CE: IntoSql<'a>,
    CF: IntoSql<'a>,
    CG: IntoSql<'a>,
    CH: IntoSql<'a>,
    CI: IntoSql<'a>,
    CJ: IntoSql<'a>,
    CK: IntoSql<'a>,
    CL: IntoSql<'a>,
    CM: IntoSql<'a>,
    CN: IntoSql<'a>,
    CO: IntoSql<'a>,
    CP: IntoSql<'a>,
    CQ: IntoSql<'a>,
    CR: IntoSql<'a>,
    CS: IntoSql<'a>,
    CT: IntoSql<'a>,
    CU: IntoSql<'a>,
    CV: IntoSql<'a>
{
    fn into_row(self) -> TokenRow<'a> {
        let mut row = TokenRow::with_capacity(100);
        row.push(self.0.into_sql());
        row.push(self.1.into_sql());
        row.push(self.2.into_sql());
        row.push(self.3.into_sql());
        row.push(self.4.into_sql());
        row.push(self.5.into_sql());
        row.push(self.6.into_sql());
        row.push(self.7.into_sql());
        row.push(self.8.into_sql());
        row.push(self.9.into_sql());
        row.push(self.10.into_sql());
        row.push(self.11.into_sql());
        row.push(self.12.into_sql());
        row.push(self.13.into_sql());
        row.push(self.14.into_sql());
        row.push(self.15.into_sql());
        row.push(self.16.into_sql());
        row.push(self.17.into_sql());
        row.push(self.18.into_sql());
        row.push(self.19.into_sql());
        row.push(self.20.into_sql());
        row.push(self.21.into_sql());
        row.push(self.22.into_sql());
        row.push(self.23.into_sql());
        row.push(self.24.into_sql());
        row.push(self.25.into_sql());
        row.push(self.26.into_sql());
        row.push(self.27.into_sql());
        row.push(self.28.into_sql());
        row.push(self.29.into_sql());
        row.push(self.30.into_sql());
        row.push(self.31.into_sql());
        row.push(self.32.into_sql());
        row.push(self.33.into_sql());
        row.push(self.34.into_sql());
        row.push(self.35.into_sql());
        row.push(self.36.into_sql());
        row.push(self.37.into_sql());
        row.push(self.38.into_sql());
        row.push(self.39.into_sql());
        row.push(self.40.into_sql());
        row.push(self.41.into_sql());
        row.push(self.42.into_sql());
        row.push(self.43.into_sql());
        row.push(self.44.into_sql());
        row.push(self.45.into_sql());
        row.push(self.46.into_sql());
        row.push(self.47.into_sql());
        row.push(self.48.into_sql());
        row.push(self.49.into_sql());
        row.push(self.50.into_sql());
        row.push(self.51.into_sql());
        row.push(self.52.into_sql());
        row.push(self.53.into_sql());
        row.push(self.54.into_sql());
        row.push(self.55.into_sql());
        row.push(self.56.into_sql());
        row.push(self.57.into_sql());
        row.push(self.58.into_sql());
        row.push(self.59.into_sql());
        row.push(self.60.into_sql());
        row.push(self.61.into_sql());
        row.push(self.62.into_sql());
        row.push(self.63.into_sql());
        row.push(self.64.into_sql());
        row.push(self.65.into_sql());
        row.push(self.66.into_sql());
        row.push(self.67.into_sql());
        row.push(self.68.into_sql());
        row.push(self.69.into_sql());
        row.push(self.70.into_sql());
        row.push(self.71.into_sql());
        row.push(self.72.into_sql());
        row.push(self.73.into_sql());
        row.push(self.74.into_sql());
        row.push(self.75.into_sql());
        row.push(self.76.into_sql());
        row.push(self.77.into_sql());
        row.push(self.78.into_sql());
        row.push(self.79.into_sql());
        row.push(self.80.into_sql());
        row.push(self.81.into_sql());
        row.push(self.82.into_sql());
        row.push(self.83.into_sql());
        row.push(self.84.into_sql());
        row.push(self.85.into_sql());
        row.push(self.86.into_sql());
        row.push(self.87.into_sql());
        row.push(self.88.into_sql());
        row.push(self.89.into_sql());
        row.push(self.90.into_sql());
        row.push(self.91.into_sql());
        row.push(self.92.into_sql());
        row.push(self.93.into_sql());
        row.push(self.94.into_sql());
        row.push(self.95.into_sql());
        row.push(self.96.into_sql());
        row.push(self.97.into_sql());
        row.push(self.98.into_sql());
        row.push(self.99.into_sql());
        row
    }
}

